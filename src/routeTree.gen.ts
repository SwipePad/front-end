/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as WalletImport } from "./routes/wallet";
import { Route as SellImport } from "./routes/sell";
import { Route as ProfileImport } from "./routes/profile";
import { Route as FeedImport } from "./routes/feed";
import { Route as BuyImport } from "./routes/buy";
import { Route as IndexImport } from "./routes/index";
import { Route as WalletMyActivityImport } from "./routes/wallet_.my-activity";
import { Route as SellTokenIdImport } from "./routes/sell.$tokenId";
import { Route as ProfileProfileIdImport } from "./routes/profile/$profileId";
import { Route as BuyTokenIdImport } from "./routes/buy.$tokenId";
import { Route as TokensEditTokenIdImport } from "./routes/tokens/edit.$tokenId";
import { Route as SellTokenIdConfirmImport } from "./routes/sell.$tokenId_.confirm";
import { Route as ProfileProfileIdInviteImport } from "./routes/profile/$profileId_.invite";
import { Route as ProfileProfileIdFollowImport } from "./routes/profile/$profileId_.follow";
import { Route as BuyTokenIdConfirmImport } from "./routes/buy.$tokenId_.confirm";
import { Route as ProfileProfileIdCollectionsCollectionIdImport } from "./routes/profile/$profileId_.collections.$collectionId";

// Create Virtual Routes

const CreateTokenLazyImport = createFileRoute("/create-token")();
const TokensIndexLazyImport = createFileRoute("/tokens/")();
const ExploreIndexLazyImport = createFileRoute("/explore/")();
const TokensTokenIdLazyImport = createFileRoute("/tokens/$tokenId")();
const CollectionsAddLazyImport = createFileRoute("/collections/add")();
const ProfileEditIndexLazyImport = createFileRoute("/profile/edit/")();
const ExploreSearchIndexLazyImport = createFileRoute("/explore/search/")();
const ExploreLeaderboardIndexLazyImport = createFileRoute("/explore/leaderboard/")();

// Create/Update Routes

const CreateTokenLazyRoute = CreateTokenLazyImport.update({
  id: "/create-token",
  path: "/create-token",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/create-token.lazy").then(d => d.Route));

const WalletRoute = WalletImport.update({
  id: "/wallet",
  path: "/wallet",
  getParentRoute: () => rootRoute,
} as any);

const SellRoute = SellImport.update({
  id: "/sell",
  path: "/sell",
  getParentRoute: () => rootRoute,
} as any);

const ProfileRoute = ProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => rootRoute,
} as any);

const FeedRoute = FeedImport.update({
  id: "/feed",
  path: "/feed",
  getParentRoute: () => rootRoute,
} as any);

const BuyRoute = BuyImport.update({
  id: "/buy",
  path: "/buy",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const TokensIndexLazyRoute = TokensIndexLazyImport.update({
  id: "/tokens/",
  path: "/tokens/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/tokens/index.lazy").then(d => d.Route));

const ExploreIndexLazyRoute = ExploreIndexLazyImport.update({
  id: "/explore/",
  path: "/explore/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/explore/index.lazy").then(d => d.Route));

const TokensTokenIdLazyRoute = TokensTokenIdLazyImport.update({
  id: "/tokens/$tokenId",
  path: "/tokens/$tokenId",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/tokens/$tokenId.lazy").then(d => d.Route));

const CollectionsAddLazyRoute = CollectionsAddLazyImport.update({
  id: "/collections/add",
  path: "/collections/add",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/collections/add.lazy").then(d => d.Route));

const WalletMyActivityRoute = WalletMyActivityImport.update({
  id: "/wallet_/my-activity",
  path: "/wallet/my-activity",
  getParentRoute: () => rootRoute,
} as any);

const SellTokenIdRoute = SellTokenIdImport.update({
  id: "/$tokenId",
  path: "/$tokenId",
  getParentRoute: () => SellRoute,
} as any);

const ProfileProfileIdRoute = ProfileProfileIdImport.update({
  id: "/$profileId",
  path: "/$profileId",
  getParentRoute: () => ProfileRoute,
} as any);

const BuyTokenIdRoute = BuyTokenIdImport.update({
  id: "/$tokenId",
  path: "/$tokenId",
  getParentRoute: () => BuyRoute,
} as any);

const ProfileEditIndexLazyRoute = ProfileEditIndexLazyImport.update({
  id: "/edit/",
  path: "/edit/",
  getParentRoute: () => ProfileRoute,
} as any).lazy(() => import("./routes/profile/edit/index.lazy").then(d => d.Route));

const ExploreSearchIndexLazyRoute = ExploreSearchIndexLazyImport.update({
  id: "/explore/search/",
  path: "/explore/search/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/explore/search/index.lazy").then(d => d.Route));

const ExploreLeaderboardIndexLazyRoute = ExploreLeaderboardIndexLazyImport.update({
  id: "/explore/leaderboard/",
  path: "/explore/leaderboard/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/explore/leaderboard/index.lazy").then(d => d.Route));

const TokensEditTokenIdRoute = TokensEditTokenIdImport.update({
  id: "/tokens/edit/$tokenId",
  path: "/tokens/edit/$tokenId",
  getParentRoute: () => rootRoute,
} as any);

const SellTokenIdConfirmRoute = SellTokenIdConfirmImport.update({
  id: "/$tokenId_/confirm",
  path: "/$tokenId/confirm",
  getParentRoute: () => SellRoute,
} as any);

const ProfileProfileIdInviteRoute = ProfileProfileIdInviteImport.update({
  id: "/$profileId_/invite",
  path: "/$profileId/invite",
  getParentRoute: () => ProfileRoute,
} as any);

const ProfileProfileIdFollowRoute = ProfileProfileIdFollowImport.update({
  id: "/$profileId_/follow",
  path: "/$profileId/follow",
  getParentRoute: () => ProfileRoute,
} as any);

const BuyTokenIdConfirmRoute = BuyTokenIdConfirmImport.update({
  id: "/$tokenId_/confirm",
  path: "/$tokenId/confirm",
  getParentRoute: () => BuyRoute,
} as any);

const ProfileProfileIdCollectionsCollectionIdRoute =
  ProfileProfileIdCollectionsCollectionIdImport.update({
    id: "/$profileId_/collections/$collectionId",
    path: "/$profileId/collections/$collectionId",
    getParentRoute: () => ProfileRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/buy": {
      id: "/buy";
      path: "/buy";
      fullPath: "/buy";
      preLoaderRoute: typeof BuyImport;
      parentRoute: typeof rootRoute;
    };
    "/feed": {
      id: "/feed";
      path: "/feed";
      fullPath: "/feed";
      preLoaderRoute: typeof FeedImport;
      parentRoute: typeof rootRoute;
    };
    "/profile": {
      id: "/profile";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof ProfileImport;
      parentRoute: typeof rootRoute;
    };
    "/sell": {
      id: "/sell";
      path: "/sell";
      fullPath: "/sell";
      preLoaderRoute: typeof SellImport;
      parentRoute: typeof rootRoute;
    };
    "/wallet": {
      id: "/wallet";
      path: "/wallet";
      fullPath: "/wallet";
      preLoaderRoute: typeof WalletImport;
      parentRoute: typeof rootRoute;
    };
    "/create-token": {
      id: "/create-token";
      path: "/create-token";
      fullPath: "/create-token";
      preLoaderRoute: typeof CreateTokenLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/buy/$tokenId": {
      id: "/buy/$tokenId";
      path: "/$tokenId";
      fullPath: "/buy/$tokenId";
      preLoaderRoute: typeof BuyTokenIdImport;
      parentRoute: typeof BuyImport;
    };
    "/profile/$profileId": {
      id: "/profile/$profileId";
      path: "/$profileId";
      fullPath: "/profile/$profileId";
      preLoaderRoute: typeof ProfileProfileIdImport;
      parentRoute: typeof ProfileImport;
    };
    "/sell/$tokenId": {
      id: "/sell/$tokenId";
      path: "/$tokenId";
      fullPath: "/sell/$tokenId";
      preLoaderRoute: typeof SellTokenIdImport;
      parentRoute: typeof SellImport;
    };
    "/wallet_/my-activity": {
      id: "/wallet_/my-activity";
      path: "/wallet/my-activity";
      fullPath: "/wallet/my-activity";
      preLoaderRoute: typeof WalletMyActivityImport;
      parentRoute: typeof rootRoute;
    };
    "/collections/add": {
      id: "/collections/add";
      path: "/collections/add";
      fullPath: "/collections/add";
      preLoaderRoute: typeof CollectionsAddLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/tokens/$tokenId": {
      id: "/tokens/$tokenId";
      path: "/tokens/$tokenId";
      fullPath: "/tokens/$tokenId";
      preLoaderRoute: typeof TokensTokenIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/explore/": {
      id: "/explore/";
      path: "/explore";
      fullPath: "/explore";
      preLoaderRoute: typeof ExploreIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/tokens/": {
      id: "/tokens/";
      path: "/tokens";
      fullPath: "/tokens";
      preLoaderRoute: typeof TokensIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/buy/$tokenId_/confirm": {
      id: "/buy/$tokenId_/confirm";
      path: "/$tokenId/confirm";
      fullPath: "/buy/$tokenId/confirm";
      preLoaderRoute: typeof BuyTokenIdConfirmImport;
      parentRoute: typeof BuyImport;
    };
    "/profile/$profileId_/follow": {
      id: "/profile/$profileId_/follow";
      path: "/$profileId/follow";
      fullPath: "/profile/$profileId/follow";
      preLoaderRoute: typeof ProfileProfileIdFollowImport;
      parentRoute: typeof ProfileImport;
    };
    "/profile/$profileId_/invite": {
      id: "/profile/$profileId_/invite";
      path: "/$profileId/invite";
      fullPath: "/profile/$profileId/invite";
      preLoaderRoute: typeof ProfileProfileIdInviteImport;
      parentRoute: typeof ProfileImport;
    };
    "/sell/$tokenId_/confirm": {
      id: "/sell/$tokenId_/confirm";
      path: "/$tokenId/confirm";
      fullPath: "/sell/$tokenId/confirm";
      preLoaderRoute: typeof SellTokenIdConfirmImport;
      parentRoute: typeof SellImport;
    };
    "/tokens/edit/$tokenId": {
      id: "/tokens/edit/$tokenId";
      path: "/tokens/edit/$tokenId";
      fullPath: "/tokens/edit/$tokenId";
      preLoaderRoute: typeof TokensEditTokenIdImport;
      parentRoute: typeof rootRoute;
    };
    "/explore/leaderboard/": {
      id: "/explore/leaderboard/";
      path: "/explore/leaderboard";
      fullPath: "/explore/leaderboard";
      preLoaderRoute: typeof ExploreLeaderboardIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/explore/search/": {
      id: "/explore/search/";
      path: "/explore/search";
      fullPath: "/explore/search";
      preLoaderRoute: typeof ExploreSearchIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/profile/edit/": {
      id: "/profile/edit/";
      path: "/edit";
      fullPath: "/profile/edit";
      preLoaderRoute: typeof ProfileEditIndexLazyImport;
      parentRoute: typeof ProfileImport;
    };
    "/profile/$profileId_/collections/$collectionId": {
      id: "/profile/$profileId_/collections/$collectionId";
      path: "/$profileId/collections/$collectionId";
      fullPath: "/profile/$profileId/collections/$collectionId";
      preLoaderRoute: typeof ProfileProfileIdCollectionsCollectionIdImport;
      parentRoute: typeof ProfileImport;
    };
  }
}

// Create and export the route tree

interface BuyRouteChildren {
  BuyTokenIdRoute: typeof BuyTokenIdRoute;
  BuyTokenIdConfirmRoute: typeof BuyTokenIdConfirmRoute;
}

const BuyRouteChildren: BuyRouteChildren = {
  BuyTokenIdRoute: BuyTokenIdRoute,
  BuyTokenIdConfirmRoute: BuyTokenIdConfirmRoute,
};

const BuyRouteWithChildren = BuyRoute._addFileChildren(BuyRouteChildren);

interface ProfileRouteChildren {
  ProfileProfileIdRoute: typeof ProfileProfileIdRoute;
  ProfileProfileIdFollowRoute: typeof ProfileProfileIdFollowRoute;
  ProfileProfileIdInviteRoute: typeof ProfileProfileIdInviteRoute;
  ProfileEditIndexLazyRoute: typeof ProfileEditIndexLazyRoute;
  ProfileProfileIdCollectionsCollectionIdRoute: typeof ProfileProfileIdCollectionsCollectionIdRoute;
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileProfileIdRoute: ProfileProfileIdRoute,
  ProfileProfileIdFollowRoute: ProfileProfileIdFollowRoute,
  ProfileProfileIdInviteRoute: ProfileProfileIdInviteRoute,
  ProfileEditIndexLazyRoute: ProfileEditIndexLazyRoute,
  ProfileProfileIdCollectionsCollectionIdRoute: ProfileProfileIdCollectionsCollectionIdRoute,
};

const ProfileRouteWithChildren = ProfileRoute._addFileChildren(ProfileRouteChildren);

interface SellRouteChildren {
  SellTokenIdRoute: typeof SellTokenIdRoute;
  SellTokenIdConfirmRoute: typeof SellTokenIdConfirmRoute;
}

const SellRouteChildren: SellRouteChildren = {
  SellTokenIdRoute: SellTokenIdRoute,
  SellTokenIdConfirmRoute: SellTokenIdConfirmRoute,
};

const SellRouteWithChildren = SellRoute._addFileChildren(SellRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/buy": typeof BuyRouteWithChildren;
  "/feed": typeof FeedRoute;
  "/profile": typeof ProfileRouteWithChildren;
  "/sell": typeof SellRouteWithChildren;
  "/wallet": typeof WalletRoute;
  "/create-token": typeof CreateTokenLazyRoute;
  "/buy/$tokenId": typeof BuyTokenIdRoute;
  "/profile/$profileId": typeof ProfileProfileIdRoute;
  "/sell/$tokenId": typeof SellTokenIdRoute;
  "/wallet/my-activity": typeof WalletMyActivityRoute;
  "/collections/add": typeof CollectionsAddLazyRoute;
  "/tokens/$tokenId": typeof TokensTokenIdLazyRoute;
  "/explore": typeof ExploreIndexLazyRoute;
  "/tokens": typeof TokensIndexLazyRoute;
  "/buy/$tokenId/confirm": typeof BuyTokenIdConfirmRoute;
  "/profile/$profileId/follow": typeof ProfileProfileIdFollowRoute;
  "/profile/$profileId/invite": typeof ProfileProfileIdInviteRoute;
  "/sell/$tokenId/confirm": typeof SellTokenIdConfirmRoute;
  "/tokens/edit/$tokenId": typeof TokensEditTokenIdRoute;
  "/explore/leaderboard": typeof ExploreLeaderboardIndexLazyRoute;
  "/explore/search": typeof ExploreSearchIndexLazyRoute;
  "/profile/edit": typeof ProfileEditIndexLazyRoute;
  "/profile/$profileId/collections/$collectionId": typeof ProfileProfileIdCollectionsCollectionIdRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/buy": typeof BuyRouteWithChildren;
  "/feed": typeof FeedRoute;
  "/profile": typeof ProfileRouteWithChildren;
  "/sell": typeof SellRouteWithChildren;
  "/wallet": typeof WalletRoute;
  "/create-token": typeof CreateTokenLazyRoute;
  "/buy/$tokenId": typeof BuyTokenIdRoute;
  "/profile/$profileId": typeof ProfileProfileIdRoute;
  "/sell/$tokenId": typeof SellTokenIdRoute;
  "/wallet/my-activity": typeof WalletMyActivityRoute;
  "/collections/add": typeof CollectionsAddLazyRoute;
  "/tokens/$tokenId": typeof TokensTokenIdLazyRoute;
  "/explore": typeof ExploreIndexLazyRoute;
  "/tokens": typeof TokensIndexLazyRoute;
  "/buy/$tokenId/confirm": typeof BuyTokenIdConfirmRoute;
  "/profile/$profileId/follow": typeof ProfileProfileIdFollowRoute;
  "/profile/$profileId/invite": typeof ProfileProfileIdInviteRoute;
  "/sell/$tokenId/confirm": typeof SellTokenIdConfirmRoute;
  "/tokens/edit/$tokenId": typeof TokensEditTokenIdRoute;
  "/explore/leaderboard": typeof ExploreLeaderboardIndexLazyRoute;
  "/explore/search": typeof ExploreSearchIndexLazyRoute;
  "/profile/edit": typeof ProfileEditIndexLazyRoute;
  "/profile/$profileId/collections/$collectionId": typeof ProfileProfileIdCollectionsCollectionIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/buy": typeof BuyRouteWithChildren;
  "/feed": typeof FeedRoute;
  "/profile": typeof ProfileRouteWithChildren;
  "/sell": typeof SellRouteWithChildren;
  "/wallet": typeof WalletRoute;
  "/create-token": typeof CreateTokenLazyRoute;
  "/buy/$tokenId": typeof BuyTokenIdRoute;
  "/profile/$profileId": typeof ProfileProfileIdRoute;
  "/sell/$tokenId": typeof SellTokenIdRoute;
  "/wallet_/my-activity": typeof WalletMyActivityRoute;
  "/collections/add": typeof CollectionsAddLazyRoute;
  "/tokens/$tokenId": typeof TokensTokenIdLazyRoute;
  "/explore/": typeof ExploreIndexLazyRoute;
  "/tokens/": typeof TokensIndexLazyRoute;
  "/buy/$tokenId_/confirm": typeof BuyTokenIdConfirmRoute;
  "/profile/$profileId_/follow": typeof ProfileProfileIdFollowRoute;
  "/profile/$profileId_/invite": typeof ProfileProfileIdInviteRoute;
  "/sell/$tokenId_/confirm": typeof SellTokenIdConfirmRoute;
  "/tokens/edit/$tokenId": typeof TokensEditTokenIdRoute;
  "/explore/leaderboard/": typeof ExploreLeaderboardIndexLazyRoute;
  "/explore/search/": typeof ExploreSearchIndexLazyRoute;
  "/profile/edit/": typeof ProfileEditIndexLazyRoute;
  "/profile/$profileId_/collections/$collectionId": typeof ProfileProfileIdCollectionsCollectionIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/buy"
    | "/feed"
    | "/profile"
    | "/sell"
    | "/wallet"
    | "/create-token"
    | "/buy/$tokenId"
    | "/profile/$profileId"
    | "/sell/$tokenId"
    | "/wallet/my-activity"
    | "/collections/add"
    | "/tokens/$tokenId"
    | "/explore"
    | "/tokens"
    | "/buy/$tokenId/confirm"
    | "/profile/$profileId/follow"
    | "/profile/$profileId/invite"
    | "/sell/$tokenId/confirm"
    | "/tokens/edit/$tokenId"
    | "/explore/leaderboard"
    | "/explore/search"
    | "/profile/edit"
    | "/profile/$profileId/collections/$collectionId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/buy"
    | "/feed"
    | "/profile"
    | "/sell"
    | "/wallet"
    | "/create-token"
    | "/buy/$tokenId"
    | "/profile/$profileId"
    | "/sell/$tokenId"
    | "/wallet/my-activity"
    | "/collections/add"
    | "/tokens/$tokenId"
    | "/explore"
    | "/tokens"
    | "/buy/$tokenId/confirm"
    | "/profile/$profileId/follow"
    | "/profile/$profileId/invite"
    | "/sell/$tokenId/confirm"
    | "/tokens/edit/$tokenId"
    | "/explore/leaderboard"
    | "/explore/search"
    | "/profile/edit"
    | "/profile/$profileId/collections/$collectionId";
  id:
    | "__root__"
    | "/"
    | "/buy"
    | "/feed"
    | "/profile"
    | "/sell"
    | "/wallet"
    | "/create-token"
    | "/buy/$tokenId"
    | "/profile/$profileId"
    | "/sell/$tokenId"
    | "/wallet_/my-activity"
    | "/collections/add"
    | "/tokens/$tokenId"
    | "/explore/"
    | "/tokens/"
    | "/buy/$tokenId_/confirm"
    | "/profile/$profileId_/follow"
    | "/profile/$profileId_/invite"
    | "/sell/$tokenId_/confirm"
    | "/tokens/edit/$tokenId"
    | "/explore/leaderboard/"
    | "/explore/search/"
    | "/profile/edit/"
    | "/profile/$profileId_/collections/$collectionId";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BuyRoute: typeof BuyRouteWithChildren;
  FeedRoute: typeof FeedRoute;
  ProfileRoute: typeof ProfileRouteWithChildren;
  SellRoute: typeof SellRouteWithChildren;
  WalletRoute: typeof WalletRoute;
  CreateTokenLazyRoute: typeof CreateTokenLazyRoute;
  WalletMyActivityRoute: typeof WalletMyActivityRoute;
  CollectionsAddLazyRoute: typeof CollectionsAddLazyRoute;
  TokensTokenIdLazyRoute: typeof TokensTokenIdLazyRoute;
  ExploreIndexLazyRoute: typeof ExploreIndexLazyRoute;
  TokensIndexLazyRoute: typeof TokensIndexLazyRoute;
  TokensEditTokenIdRoute: typeof TokensEditTokenIdRoute;
  ExploreLeaderboardIndexLazyRoute: typeof ExploreLeaderboardIndexLazyRoute;
  ExploreSearchIndexLazyRoute: typeof ExploreSearchIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuyRoute: BuyRouteWithChildren,
  FeedRoute: FeedRoute,
  ProfileRoute: ProfileRouteWithChildren,
  SellRoute: SellRouteWithChildren,
  WalletRoute: WalletRoute,
  CreateTokenLazyRoute: CreateTokenLazyRoute,
  WalletMyActivityRoute: WalletMyActivityRoute,
  CollectionsAddLazyRoute: CollectionsAddLazyRoute,
  TokensTokenIdLazyRoute: TokensTokenIdLazyRoute,
  ExploreIndexLazyRoute: ExploreIndexLazyRoute,
  TokensIndexLazyRoute: TokensIndexLazyRoute,
  TokensEditTokenIdRoute: TokensEditTokenIdRoute,
  ExploreLeaderboardIndexLazyRoute: ExploreLeaderboardIndexLazyRoute,
  ExploreSearchIndexLazyRoute: ExploreSearchIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/buy",
        "/feed",
        "/profile",
        "/sell",
        "/wallet",
        "/create-token",
        "/wallet_/my-activity",
        "/collections/add",
        "/tokens/$tokenId",
        "/explore/",
        "/tokens/",
        "/tokens/edit/$tokenId",
        "/explore/leaderboard/",
        "/explore/search/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/buy": {
      "filePath": "buy.tsx",
      "children": [
        "/buy/$tokenId",
        "/buy/$tokenId_/confirm"
      ]
    },
    "/feed": {
      "filePath": "feed.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/$profileId",
        "/profile/$profileId_/follow",
        "/profile/$profileId_/invite",
        "/profile/edit/",
        "/profile/$profileId_/collections/$collectionId"
      ]
    },
    "/sell": {
      "filePath": "sell.tsx",
      "children": [
        "/sell/$tokenId",
        "/sell/$tokenId_/confirm"
      ]
    },
    "/wallet": {
      "filePath": "wallet.tsx"
    },
    "/create-token": {
      "filePath": "create-token.lazy.tsx"
    },
    "/buy/$tokenId": {
      "filePath": "buy.$tokenId.tsx",
      "parent": "/buy"
    },
    "/profile/$profileId": {
      "filePath": "profile/$profileId.tsx",
      "parent": "/profile"
    },
    "/sell/$tokenId": {
      "filePath": "sell.$tokenId.tsx",
      "parent": "/sell"
    },
    "/wallet_/my-activity": {
      "filePath": "wallet_.my-activity.tsx"
    },
    "/collections/add": {
      "filePath": "collections/add.lazy.tsx"
    },
    "/tokens/$tokenId": {
      "filePath": "tokens/$tokenId.lazy.tsx"
    },
    "/explore/": {
      "filePath": "explore/index.lazy.tsx"
    },
    "/tokens/": {
      "filePath": "tokens/index.lazy.tsx"
    },
    "/buy/$tokenId_/confirm": {
      "filePath": "buy.$tokenId_.confirm.tsx",
      "parent": "/buy"
    },
    "/profile/$profileId_/follow": {
      "filePath": "profile/$profileId_.follow.tsx",
      "parent": "/profile"
    },
    "/profile/$profileId_/invite": {
      "filePath": "profile/$profileId_.invite.tsx",
      "parent": "/profile"
    },
    "/sell/$tokenId_/confirm": {
      "filePath": "sell.$tokenId_.confirm.tsx",
      "parent": "/sell"
    },
    "/tokens/edit/$tokenId": {
      "filePath": "tokens/edit.$tokenId.tsx"
    },
    "/explore/leaderboard/": {
      "filePath": "explore/leaderboard/index.lazy.tsx"
    },
    "/explore/search/": {
      "filePath": "explore/search/index.lazy.tsx"
    },
    "/profile/edit/": {
      "filePath": "profile/edit/index.lazy.tsx",
      "parent": "/profile"
    },
    "/profile/$profileId_/collections/$collectionId": {
      "filePath": "profile/$profileId_.collections.$collectionId.tsx",
      "parent": "/profile"
    }
  }
}
ROUTE_MANIFEST_END */
